// Code generated by go-bindata.
// sources:
// config/config.yaml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x57\x4d\x6f\x1b\x37\x10\xbd\xeb\x57\x0c\xec\x43\xec\xc6\x5e\x5f\x0a\xa3\xd0\xcd\xb0\xdd\xc2\x40\x6b\x07\x96\x82\xf6\x20\x40\xa0\xc8\x59\x2d\x6b\x2e\xb9\x99\x99\xb5\xa4\xfc\xfa\x82\xe4\xca\xb6\x5a\xed\x4a\x45\x0e\x41\x12\x0e\xf7\xbd\xc7\xc7\xf9\xa0\x6a\x14\xb2\x9a\xc7\xa3\x53\x78\x9c\xdc\xc1\x1f\xf9\xbf\xa3\x53\x98\xaa\x17\xf4\x50\x52\xa8\xa1\x12\x69\x78\x7c\x75\xb5\x5a\xad\x0a\xef\x3c\x8a\x53\x0b\x2e\xbc\xbb\x6a\x28\xfc\x8d\x5a\xf8\xca\xb3\x89\x7f\x2e\x75\xf0\x42\xc1\x15\xbf\x14\x95\xd4\x0e\x4e\x26\xd3\x9b\xe9\xc3\x64\xfa\x70\x0b\xb7\x4f\x5f\x1f\xa7\xf7\xcf\x93\x93\x11\x80\x6f\xeb\xe2\x5b\x8b\x64\x91\xc7\x23\x00\x80\x0a\x5d\x33\x86\x4f\xbe\xad\x17\x48\x10\x4a\xe8\xa2\x40\xa8\xd1\xbe\xa2\x81\x33\xa9\x10\x44\x37\xa0\xbc\x81\xd6\x34\x6f\x3b\x94\x31\x68\xa0\x6d\xce\x8b\x4f\x09\x4a\x36\x0d\x8e\x41\x87\xd6\x0b\xd2\x08\x40\x6c\x8d\xc5\x22\x04\xd9\x61\x6a\x9b\xb8\x0e\xd6\x03\xa3\x0e\xde\x30\xb0\xf5\x1a\x21\xb2\x30\xd2\x2b\x12\xac\x14\x03\x8b\x22\x41\x53\xc0\x9f\x56\x2a\x28\x49\x69\xb1\xc1\x2b\xb7\xfd\x6a\x87\x73\xa9\xda\x25\x6e\x19\xd1\xa9\x86\xd1\xec\x90\x26\xca\x77\x1e\xa7\x58\x22\x83\xc4\x63\x36\x81\xe4\xe2\x83\x9e\x8e\xf2\x58\x4e\xb6\xdf\xb1\x30\x8b\xc2\x58\x7e\xd9\xe1\x8c\x81\x68\xa8\x67\x53\x98\x05\x04\x0f\x71\x4b\x62\x5a\x6c\x04\x87\xd1\x6a\xac\xf7\x82\x45\xf5\x77\x8f\x13\x30\x4a\xd4\x42\x71\xf2\xb1\xc6\x3a\xd0\xe6\x18\xe0\x75\x49\xa6\x17\x3a\xc3\x40\x19\x08\xbe\x07\x8f\x20\xa4\x3c\x97\x48\x9c\x2e\xde\x07\xb1\x65\xbc\x75\xeb\x21\xc2\x40\x43\x41\x23\xf3\x05\xe0\x5a\xbb\xd6\x20\xc3\x74\xf2\xf0\x5b\x12\x76\x8c\x14\x1d\x7c\x69\x97\xfd\xae\x45\x09\xce\xb2\x40\x69\x1d\xbe\x9b\xf7\x46\x16\x8d\x88\xce\x46\x9c\x84\xf8\x3f\x48\xfb\x1c\xc8\xe1\x74\x84\x8f\xbe\xbe\x60\x23\x20\x2b\xab\xbb\xac\x4d\x39\x1a\x3d\xd9\xf5\x61\x90\x3e\xd6\x1d\x1a\x7f\xa8\xe8\x56\x31\xf3\xee\xe3\x05\x3f\x7d\x99\xf6\x94\xd5\x16\x0a\x89\x0e\xa1\x55\x56\x57\x50\x2a\xeb\xd0\x64\xd4\x46\x11\xe3\x00\x6e\x6b\x9a\x03\x98\x21\x1e\xfe\xeb\xdd\x17\xb0\xcd\xcf\xc3\x40\xd7\xc7\x23\x5d\x0f\x20\x89\xee\x93\xa4\x83\xf7\x98\x4a\xb4\x03\x9b\xde\x1e\x92\x25\xba\x57\x56\x0f\xda\x90\x34\xe5\x79\x85\x34\x5f\x85\xb9\x52\x3d\xa8\x79\x4b\x77\xb1\x8f\x4f\xf7\xcf\xcf\x4f\xcf\x40\x3a\x18\x4c\x19\x14\x97\x43\x2b\x70\x73\x03\xa5\x53\xcb\x0b\x90\xca\xc6\x12\xfb\x90\xe4\x84\x25\x12\x29\xc7\x03\x42\x68\x7d\x38\x19\x62\x5d\xe7\x84\xc8\xa8\xa9\xbb\x77\xc9\x31\xe4\xd8\x00\xf4\xf6\x70\xbb\xd0\xa9\x6f\xd4\x56\x0e\x63\x93\x5a\x97\x7d\xd8\x37\x7f\xfd\xfa\x0c\x84\xdf\x5a\x64\xe1\x3c\x0b\xb5\xb3\xe8\x85\xe3\x40\x52\x02\xcb\x20\xb9\x16\xb3\x8b\xb1\x91\xbb\x4d\xdf\x28\x4a\x27\xa1\xd6\x6b\x25\xff\x9a\x0c\x3d\x57\x35\xbd\x4d\x17\x02\x8c\x32\x00\x69\x28\x34\x4d\x2f\xe0\xd6\xf9\x24\x77\x85\x84\xd0\xed\x87\x05\x6a\xd5\x72\x9a\x45\x9b\x6d\x7d\xb2\xf2\x56\x36\xa0\x2b\xd4\x2f\x43\xa7\x70\x7d\x3d\xe4\xbf\x09\xfc\xfb\x24\x95\x03\xa4\x7f\xbd\x4d\x6d\xc2\xd8\xcc\x63\x2b\x90\x34\x9e\x72\x59\x0c\x53\x1e\x5f\x34\x89\xf3\xfa\x38\xce\xbe\xda\x8a\xbd\xbf\xa8\x15\x0b\xf6\x65\x47\x0e\xa6\x8d\xdc\x65\x41\x01\xd3\x0a\x19\x13\x57\x5e\x4f\x17\xe9\x03\x9c\x74\x69\x74\xb9\x2e\xe9\x04\xd0\x4b\xd4\x34\x44\xcd\x4e\xbd\x62\x0f\x73\x8a\x1d\x43\x7c\x3c\xeb\xe9\xf6\xe9\x97\x33\xa5\x8a\x04\x4e\x2d\xd0\x31\xc4\x11\x6f\xe2\xf4\xe3\x50\xc7\xa2\x5d\xe2\x1a\x5e\x95\x6b\x31\xbe\x12\x2b\x04\xad\x1a\x69\x09\x61\x49\xa1\x6d\xc0\x7a\x83\x6b\xe0\x2a\xb4\xce\x40\xad\xa4\x2b\xc8\xbc\xdc\x3d\x1e\x12\x30\x78\x55\x23\xb4\xde\x20\x75\x4c\xa3\xf4\xd7\xfc\xed\x49\x9a\x6e\x7e\x56\x44\xa1\xb3\xe2\x6c\xb6\xfa\x7c\x9e\xfd\x88\x1f\x8e\x63\x6c\x1e\x43\x69\x29\x03\xe4\x30\xc0\x25\xbc\x05\x86\xa7\x5c\xea\x74\x71\x65\x93\xbe\xe8\xcf\xbf\x59\x11\x9a\xd8\x30\x7b\x74\xe4\xe0\x0f\x2b\xc9\x30\x43\x2a\xb4\x53\xcc\x3d\x22\x52\x6c\xaf\x86\xf7\xc8\xd1\x76\xa4\x4f\x86\x94\xd0\x80\x1d\xd4\xeb\xc6\x7b\xa4\xb7\xf5\xa5\xfc\xd3\x8a\xc8\xa2\xc9\x8a\x08\xa5\x25\x0f\x03\xde\xe4\xf7\xd0\xd9\xcc\x7c\x3e\x9f\xed\xfe\xb4\xc8\xa2\x72\x7c\xde\x45\xf6\x2a\xcb\x5b\x86\x4d\xaa\x94\x37\xb1\x4d\x2e\x36\x1f\x7f\x29\x74\x8f\xaf\x81\x62\x9e\x15\x1c\xd4\xac\x38\x2b\x7e\xda\xb1\x2a\x86\xe6\x1c\xd4\x5e\x3d\x31\xf8\x51\x8d\xf1\x9c\x9f\xc4\x1c\x54\x9c\x9c\x81\xf6\x4f\xb5\x7f\x02\x00\x00\xff\xff\x2d\xce\x2d\x15\xd1\x0d\x00\x00")

func configYamlBytes() ([]byte, error) {
	return bindataRead(
		_configYaml,
		"config.yaml",
	)
}

func configYaml() (*asset, error) {
	bytes, err := configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.yaml", size: 3537, mode: os.FileMode(436), modTime: time.Unix(1607352684, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.yaml": configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.yaml": &bintree{configYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
